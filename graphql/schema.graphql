type CoreAddress @node(model: "PWWEB\\Core\\Models\\Address") {
    id: ID! @globalId
    country: CoreCountry! @hasOne
    type: CoreAddressType! @hasOne
    street: String!
    street2: String
    city: String!
    state: String
    postcode: String!
    lat: Float
    lng: Float
    primary: Boolean
    created_at: DateTime!
    updated_at: DateTime!
}

type CoreCountry @node(model: "PWWEB\\Core\\Models\\Country") {
    id: ID! @globalId
    name: String!
    iso: String!
    ioc: String
    active: Int!
    addresses: [CoreAddress!]! @hasMany
    languages: [CoreLanguage!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type CoreAddressType @node(model: "PWWEB\\Core\\Models\\Address\\Type") {
    id: ID! @globalId
    name: String!
    global: Int!
    addresses: [CoreAddress!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type CoreLanguage @node(model: "PWWEB\\Core\\Models\\Language") {
    id: ID! @globalId
    name: String!
    locale: String!
    abbreviation: String!
    installed: Boolean!
    active: Boolean!
    standard: Boolean!
    countries: [CoreCountry!]! @belongsToMany
    created_at: DateTime!
    updated_at: DateTime!
}

type CoreExchangeRate @node(model: "PWWEB\\Core\\Models\\ExchangeRate") {
    id: ID! @globalId
    rate: Float!
    currency_id: CoreCurrency! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
    deleted_at: DateTime
}


extend type Query {
    coreAddresses: [CoreAddress!]! @paginate(defaultCount: 10 model: "PWWEB\\Core\\Models\\Address")
    coreAddress(id: ID @eq): CoreAddress @find

    coreCountries: [CoreCountry!]! @paginate(defaultCount: 10 model: "PWWEB\\Core\\Models\\Country")
    coreCountry(id: ID @eq): CoreCountry @find

    coreAddressTypes: [CoreAddressType!]! @paginate(defaultCount: 10 model: "PWWEB\\Core\\Models\\Address\\Type")
    coreAddressType(id: ID @eq): CoreAddressType @find

    coreLanguages: [CoreLanguage!]! @paginate(defaultCount: 10 model: "PWWEB\\Core\\Models\\Language")
    coreLanguage(id: ID @eq): CoreLanguage @find

    coreExchangeRates: [CoreExchangeRate!]! @paginate(defaultCount: 10 model: "PWWEB\\Core\\Models\\ExchangeRate")
    coreExchangeRate(id: ID @eq): CoreExchangeRate @find
}


extend type Mutation {
    createCoreAddress(
        input: CreateCoreAddressInput! @spread
    ): CoreAddress @create(model: "PWWEB\\Core\\Models\\Address")

    updateCoreAddress(
        input: UpdateCoreAddressInput! @spread
    ): CoreAddress @update(model: "PWWEB\\Core\\Models\\Address")

    deleteCoreAddress(
        id: ID! @rules(apply: ["required"])
    ): CoreAddress @delete(model: "PWWEB\\Core\\Models\\Address")

    createCoreCountry(
        input: CreateCoreCountryInput! @spread
    ): CoreCountry @create(model: "PWWEB\\Core\\Models\\Country")

    updateCoreCountry(
        input: UpdateCoreCountryInput! @spread
    ): CoreCountry @update(model: "PWWEB\\Core\\Models\\Country")

    deleteCoreCountry(
        id: ID! @rules(apply: ["required"])
    ): CoreCountry @delete(model: "PWWEB\\Core\\Models\\Country")

    createCoreAddressType(
        input: CreateCoreAddressTypeInput! @spread
    ): CoreAddressType @create(model: "PWWEB\\Core\\Models\\Address\\Type")

    updateCoreAddressType(
        input: UpdateCoreAddressTypeInput! @spread
    ): CoreAddressType @update(model: "PWWEB\\Core\\Models\\Address\\Type")

    deleteCoreAddressType(
        id: ID! @rules(apply: ["required"])
    ): CoreAddressType @delete(model: "PWWEB\\Core\\Models\\Address\\Type")

    createCoreLanguage(
        input: CreateCoreLanguageInput! @spread
    ): CoreLanguage @create(model: "PWWEB\\Core\\Models\\Language")

    updateCoreLanguage(
        input: UpdateCoreLanguageInput! @spread
    ): CoreLanguage @update(model: "PWWEB\\Core\\Models\\Language")

    deleteCoreLanguage(
        id: ID! @rules(apply: ["required"])
    ): CoreLanguage @delete(model: "PWWEB\\Core\\Models\\Language")

    createCoreExchangeRate(
        input: CreateCoreExchangeRateInput! @spread
    ): CoreExchangeRate @create(model: "PWWEB\\Core\\Models\\ExchangeRate")

    updateCoreExchangeRate(
        input: UpdateCoreExchangeRateInput! @spread
    ): CoreExchangeRate @update(model: "PWWEB\\Core\\Models\\ExchangeRate")

    deleteCoreExchangeRate(
        id: ID! @rules(apply: ["required"])
    ): CoreExchangeRate @delete(model: "PWWEB\\Core\\Models\\ExchangeRate")
}

input CreateCoreAddressInput {
    country: CreateCoreCountryBelongsTo
    type: CreateCoreCountryBelongsTo
    street: String!
    street2: String
    city: String!
    state: String
    postcode: String!
    lat: Float
    lng: Float
    primary: Boolean
}

input UpdateCoreAddressInput {
    id: ID!
    country: UpdateCoreCountryBelongsTo
    type: UpdateCoreCountryBelongsTo
    street: String
    street2: String
    city: String
    state: String
    postcode: String
    lat: Float
    lng: Float
    primary: Boolean
}

input UpsertCoreAddressInput {
    id: ID!
    country: UpdateCoreCountryBelongsTo
    type: UpdateCoreCountryBelongsTo
    street: String
    street2: String
    city: String
    state: String
    postcode: String
    lat: Float
    lng: Float
    primary: Boolean
}

input CreateCoreCountryInput {
    name: String!
    iso: String!
    ioc: String
    active: Int!
    addresses: CreateCoreAddressHasMany
    lanugages: CreateCoreLanguageBelongsToMany
}

input UpdateCoreCountryInput {
    id: ID!
    name: String
    iso: String
    ioc: String
    active: Int
    addresses: UpdateCoreAddressHasMany
    lanugages: UpdateCoreLanguageBelongsToMany
}

input UpsertCoreCountryInput {
    id: ID!
    name: String
    iso: String
    ioc: String
    active: Int
    addresses: UpsertCoreAddressHasMany
    lanugages: UpsertCoreLanguageBelongsToMany
}

input CreateCoreAddressTypeInput {
    name: String!
    global: Int!
    addresses: CreateCoreAddressHasMany
}

input UpdateCoreAddressTypeInput {
    id: ID!
    name: String
    global: Int
    addresses: UpdateCoreAddressHasMany
}

input UpsertCoreAddressTypeInput {
    id: ID!
    name: String
    global: Int
    addresses: UpsertCoreAddressHasMany
}

input CreateCoreLanguageInput {
    name: String!
    locale: String!
    abbreviation: String!
    installed: Boolean!
    active: Boolean!
    standard: Boolean!
    countries: CreateCoreCountryBelongsToMany
}

input UpdateCoreLanguageInput {
    id: ID!
    name: String
    locale: String
    abbreviation: String
    installed: Boolean
    active: Boolean
    standard: Boolean
    countries: UpdateCoreCountryBelongsToMany
}

input UpsertCoreLanguageInput {
    id: ID!
    name: String
    locale: String
    abbreviation: String
    installed: Boolean
    active: Boolean
    standard: Boolean
    countries: UpsertCoreCountryBelongsToMany
}

input CreateCoreAddressHasMany {
    create: [CreateCoreAddressInput!]!
}

input UpdateCoreAddressHasMany {
    create: [CreateCoreAddressInput!]
    update: [UpdateCoreAddressInput!]
    upsert: [UpsertCoreAddressInput!]
    delete: [ID!]
}

input UpsertCoreAddressHasMany {
    create: [CreateCoreAddressInput!]
    update: [UpdateCoreAddressInput!]
    upsert: [UpsertCoreAddressInput!]
    delete: [ID!]
}

input CreateCoreAddressHasOne {
    create: CreateCoreAddressInput!
}

input UpdateCoreAddressHasOne {
    create: CreateCoreAddressInput!
    update: UpdateCoreAddressInput!
    upsert: UpsertCoreAddressInput!
    delete: ID!
}

input UpsertCoreAddressHasOne {
    create: CreateCoreAddressInput!
    update: UpdateCoreAddressInput!
    upsert: UpsertCoreAddressInput!
    delete: ID!
}

input CreateCoreLanguageBelongsToMany {
    create: [CreateCoreLanguageInput!]
    upsert: [UpsertCoreLanguageInput!]
    connect: [ID!]
    sync: [ID!]
}

input UpdateCoreLanguageBelongsToMany {
    create: [CreateCoreLanguageInput!]
    connect: [ID!]
    update: [UpdateCoreLanguageInput!]
    upsert: [UpsertCoreLanguageInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

input UpsertCoreLanguageBelongsToMany {
    create: [CreateCoreLanguageInput!]
    connect: [ID!]
    update: [UpdateCoreLanguageInput!]
    upsert: [UpsertCoreLanguageInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

input CreateCoreCountryBelongsToMany {
    create: [CreateCoreCountryInput!]
    upsert: [UpsertCoreCountryInput!]
    connect: [ID!]
    sync: [ID!]
}

input UpdateCoreCountryBelongsToMany {
    create: [CreateCoreCountryInput!]
    connect: [ID!]
    update: [UpdateCoreCountryInput!]
    upsert: [UpsertCoreCountryInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

input UpsertCoreCountryBelongsToMany {
    create: [CreateCoreCountryInput!]
    connect: [ID!]
    update: [UpdateCoreCountryInput!]
    upsert: [UpsertCoreCountryInput!]
    sync: [ID!]
    syncWithoutDetaching: [ID!]
    delete: [ID!]
    disconnect: [ID!]
}

input CreateCoreCountryBelongsTo {
    connect: ID
    create: CreateCoreCountryInput
    update: UpdateCoreCountryInput
    upsert: UpsertCoreCountryInput
}

input UpdateCoreCountryBelongsTo {
    connect: ID
    create: CreateCoreCountryInput
    update: UpdateCoreCountryInput
    upsert: UpsertCoreCountryInput
    disconnect: Boolean
    delete: Boolean
}

input UpsertCoreCountryBelongsTo {
    connect: ID
    create: CreateCoreCountryInput
    update: UpdateCoreCountryInput
    upsert: UpsertCoreCountryInput
    disconnect: Boolean
    delete: Boolean
}

input CreateCoreAddressTypeBelongsTo {
    connect: ID
    create: CreateCoreAddressTypeInput
    update: UpdateCoreAddressTypeInput
    upsert: UpsertCoreAddressTypeInput
}

input UpdateCoreAddressTypeBelongsTo {
    connect: ID
    create: CreateCoreAddressTypeInput
    update: UpdateCoreAddressTypeInput
    upsert: UpsertCoreAddressTypeInput
    disconnect: Boolean
    delete: Boolean
}

input UpsertCoreAddressTypeBelongsTo {
    connect: ID
    create: CreateCoreAddressTypeInput
    update: UpdateCoreAddressTypeInput
    upsert: UpsertCoreAddressTypeInput
    disconnect: Boolean
    delete: Boolean
}

input CreateCoreExchangeRateInput {
    rate: Float!
    # currency_id: CreateCoreCurrencyBelongsTo
}

input UpdateCoreExchangeRateInput {
    id: ID!
    rate: Float
    # currency_id: UpdateCoreCurrencyBelongsTo
}

input UpsertCoreExchangeRateInput {
    id: ID!
    rate: Float
    # currency_id: UpsertCoreCurrencyBelongsTo
}
